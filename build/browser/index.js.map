{"version":3,"file":"index.js","sources":["../module/lib/neural-net.js"],"sourcesContent":["import * as fs from 'fs';\r\nvar Matrix = (function () {\r\n    function Matrix(inVector) {\r\n        if (inVector) {\r\n            this.postitionedVectors = [{ vector: inVector, posInMatrix: 1 }];\r\n        }\r\n        else {\r\n            this.postitionedVectors = [];\r\n        }\r\n    }\r\n    Matrix.prototype.next = function (inVector) {\r\n        this.postitionedVectors.push({ vector: inVector, posInMatrix: this.postitionedVectors.length + 1 });\r\n    };\r\n    Object.defineProperty(Matrix.prototype, \"vectors\", {\r\n        get: function () {\r\n            var realVectors = [];\r\n            for (var _i = 0, _a = this.postitionedVectors; _i < _a.length; _i++) {\r\n                var vector = _a[_i];\r\n                realVectors.push(vector.vector);\r\n            }\r\n            return realVectors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Matrix;\r\n}());\r\nexport { Matrix };\r\nvar NeuralNet = (function () {\r\n    function NeuralNet(inputElements, hiddenLayers, numOutcomes, learningRate) {\r\n        this.weightMatrices = [];\r\n        this.numInputs = inputElements;\r\n        this.numOutcomes = numOutcomes;\r\n        this.lr = learningRate;\r\n        /**\r\n         * assemble the weights matrix [theta]\r\n         * each individual weight is represented by theta (layerNumber) (toNumber => j) (fromNumber => k)\r\n         * thus theta is a vector which, for any given theta besides in between the hidden and output layer, contains the number of weights equal\r\n         * to (numinputElements + 1 (+1 because of bias node)) * numInputElements\r\n         */\r\n        /**\r\n         * assembling Theta\r\n         */\r\n        var theta = [];\r\n        for (var i = 1; i <= hiddenLayers; i++) {\r\n            var layer_1 = i;\r\n            /**\r\n             * assembling a WeightLayer\r\n             */\r\n            var weightLayer_1 = Object.create([]);\r\n            // + 2 because +1 to account for indexing and another +1 to account for biased node\r\n            for (var k = 1; k < inputElements + 2; k++) {\r\n                /**\r\n                 * assembling a WeightVector\r\n                 */\r\n                var weightVector = Object.create([]);\r\n                for (var j = 1; j < inputElements + 1; j++) {\r\n                    var weightVal = Math.random();\r\n                    weightVector.push({ value: weightVal, jVal: j, kVal: k, layer: layer_1 });\r\n                }\r\n                weightLayer_1.push(weightVector);\r\n            }\r\n            theta.push(weightLayer_1);\r\n        }\r\n        /**\r\n         * now need to add the final layer of weights which are in-between the last hidden layer and the output layer\r\n         * weight layer number is going to be the number of hidden layers + 1\r\n         */\r\n        var layer = hiddenLayers + 1;\r\n        var weightLayer = Object.create([]);\r\n        // + 2 because +1 to account for indexing and another +1 to account for biased node\r\n        for (var k = 1; k < inputElements + 2; k++) {\r\n            /**\r\n             * assembling a WeightVector\r\n             */\r\n            var weightVector = Object.create([]);\r\n            for (var j = 1; j < numOutcomes + 1; j++) {\r\n                var weightVal = Math.random();\r\n                weightVector.push({ value: weightVal, jVal: j, kVal: k, layer: layer });\r\n            }\r\n            weightLayer.push(weightVector);\r\n        }\r\n        theta.push(weightLayer);\r\n        this._weights = theta;\r\n        // creating the weights matrix\r\n        /**\r\n         * Each vector in the weights matrix will be made up of weights [\r\n         * theta(jk), theta(j+1, k), theta(j+2, k)\r\n         * ]\r\n         */\r\n        // Loop for assembling multiple matrices\r\n        for (var i = 0; i < this._weights.length; i++) {\r\n            var currentLayer = this._weights[i];\r\n            var matrix = new Matrix();\r\n            for (var _i = 0, currentLayer_1 = currentLayer; _i < currentLayer_1.length; _i++) {\r\n                var weightArray = currentLayer_1[_i];\r\n                var vector = [];\r\n                for (var _a = 0, weightArray_1 = weightArray; _a < weightArray_1.length; _a++) {\r\n                    var weight = weightArray_1[_a];\r\n                    vector.push(weight.value);\r\n                }\r\n                matrix.next(vector);\r\n            }\r\n            this.weightMatrices.push(matrix);\r\n        }\r\n    }\r\n    /**\r\n     * Use 'layer' to choose what layer of weights you want\r\n     * Use 'kVal' to choose from all weights that have that kVal, ie the vector that corresponds to the from node\r\n     * Use 'jVal' to choose what toNode the weight is going to.\r\n     * Note that when thinking about this function, you should consider the biased node ->\r\n     * ie weightVal(1, 3, 2) will give you the weight of the first weight layer that goes from the third node of the input layer\r\n     * to the second node of the hidden layer (but first node not including the hidden layer).\r\n     * But, its jVal will be 1 to avoid confusion later on.\r\n     * @param jVal\r\n     * @param kVal\r\n     * @param layer\r\n     */\r\n    NeuralNet.prototype.weightVal = function (layer, kVal, jVal) {\r\n        var weight = this._weights[layer - 1][kVal - 1][jVal - 2];\r\n        return weight;\r\n    };\r\n    /**\r\n     *\r\n     * @param filename Desired name of the JSON file, ie \"net.json\"\r\n     * @param path Desired location of the file, ie \"./output/\"\r\n     */\r\n    NeuralNet.prototype.toJSON = function (filename, path, data) {\r\n        var fullPath = path + filename;\r\n        if (fs.existsSync(fullPath)) {\r\n            fs.unlinkSync(fullPath);\r\n            fs.writeFileSync(fullPath, data);\r\n        }\r\n    };\r\n    return NeuralNet;\r\n}());\r\nexport { NeuralNet };\r\n"],"names":["fs.writeFileSync","fs.unlinkSync","fs.existsSync"],"mappings":"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"}